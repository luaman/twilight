dnl	$Id$
dnl
dnl Process this file with ./bootstrap to produce a configure script.

AC_PREREQ(2.13)
AC_INIT(nq/sv_main.c)
AC_REVISION($Revision$)

VERSION=0.1.99
DEVEL_RELEASE=yes

dnl Checks for system type first
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

dnl Set up automake
AM_INIT_AUTOMAKE(twilight,$VERSION)
AM_CONFIG_HEADER(include/config.h)


dnl Checks for paths
test "$prefix" = "NONE" && prefix="$ac_default_prefix"
test "x$exec_prefix" = "xNONE" && exec_prefix="$prefix"
eval PDIR="$prefix"
eval DDIR="$datadir"
eval BDIR="$bindir"
if test "x$sysconfdir" = 'x${prefix}/etc' -a "$PDIR" = "/usr"; then
	EDIR="/etc"
else
	eval EDIR="$sysconfdir"
fi

AC_MSG_CHECKING(Checking host type)
case "${host}" in
	*-*-mingw32*)
		SYS=Win32

		# Having both of these is kinda silly in win32...
		SHARECONF="~/twilight.conf"
		USERCONF="~/twilight.rc"
		;;
	*)
		# Default to POSIX compliant system
		SYS=POSIX

		SHARECONF="$EDIR/twilight.conf"
		USERCONF="~/.twilightrc"
		;;
esac
AC_MSG_RESULT($SYS)

AM_CONDITIONAL(SYS_POSIX, test "$SYS" = "POSIX")
AM_CONDITIONAL(SYS_WIN32, test "$SYS" = "Win32")


dnl Checks for programs
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_RANLIB

dnl Checks for build environment characteristics
AC_C_INLINE
AC_C_CONST
AC_EXEEXT
AC_OBJEXT

AC_ARG_ENABLE(bitchiness,
	[  --enable-bitchiness     Enable (many) extra compiler warnings],,
	enable_bitchiness="$DEVEL_RELEASE")
AC_ARG_ENABLE(werror,
	[  --enable-werror         Enable error on compiler warnings],,
	enable_werror="$DEVEL_RELEASE")
AC_ARG_ENABLE(profile,
	[  --enable-profile        Enable profiling with gprof],,
	enable_profile=no)

dnl Checks for functions and headers

AC_CHECK_FUNCS(
	strlcat strlcpy \
	snprintf _snprintf vsnprintf _vsnprintf \
	strcasecmp _stricmp strncasecmp _strnicmp \
	fcntl stat _stat mkdir _mkdir
)

AC_CHECK_HEADERS(
	unistd.h fcntl.h windef.h pwd.h sys/types.h sys/stat.h \
	limits.h signal.h sys/time.h time.h execinfo.h
)

dnl Let 'em figure this one out...
AC_MSG_CHECKING(if -l33t works)
AC_MSG_RESULT(no)

dnl userpath/sharepath config
AC_ARG_WITH(sharepath,
	[  --with-sharepath        Default shared data path [DATADIR/games/twilight]],,
	with_sharepath="$DDIR/games/twilight")
AC_DEFINE_UNQUOTED(SHAREPATH, "$with_sharepath",
	[Location of read-only (shared) gamedata])

AC_ARG_WITH(userpath,
	[  --with-userpath         Default user data path [\$HOME/.twilight]],,
	with_userpath="~/.twilight")
AC_DEFINE_UNQUOTED(USERPATH, "$with_userpath",
	[Location of user-modifyable gamedata])

AC_ARG_WITH(shareconf,
	[  --with-shareconf        Default shared config [$SHARECONF]],,
	with_shareconf="$SHARECONF")
AC_DEFINE_UNQUOTED(SHARECONF, "$with_shareconf",
	[Location of read-only (shared) configuration file])

AC_ARG_WITH(userconf,
	[  --with-userconf         Default shared config [$USERCONF]],,
	with_userconf="$USERCONF")
AC_DEFINE_UNQUOTED(USERCONF, "$with_userconf",
	[Location of user-modifyable configuration file])

dnl Allow partial builds
AC_ARG_WITH(servers,
	[  --without-servers       Disables dedicated servers],,
	with_servers="yes")
AM_CONDITIONAL(SERVERS, test "x$with_servers" != "xno")

AC_ARG_WITH(clients,
	[  --without-clients       Disables clients],,
	with_clients="yes")
AM_CONDITIONAL(CLIENTS, test "x$with_clients" != "xno")

dnl Check for SDL, fatal if not found
AM_PATH_SDL(1.2.0,
	,
	AC_MSG_ERROR([SDL 1.2 or above is required to build $PACKAGE])
)
SDLVER="$sdl_major_version.$sdl_minor_version.$sdl_micro_version"


dnl Some systems need a keyword in declarations for dynamic libs
AC_MSG_CHECKING(for OpenGL import declaration)
case "${SYS}" in
	Win32) DYNGLENTRY="APIENTRY" ;;
	*) DYNGLENTRY="" ;;
esac
if test "x$DYNGLENTRY" = "x"; then
	AC_MSG_RESULT(None needed)
else
	AC_MSG_RESULT($DYNGLENTRY)
fi
AC_DEFINE_UNQUOTED(DYNGLENTRY, $DYNGLENTRY,
	[Define to whatever your OS requires])

dnl let the user choose the default OpenGL library
AC_ARG_WITH(libgl,
	[  --with-libgl            Default name of your OpenGL library
                          (only affects value of the gl_driver Cvar)],,
	[with_libgl=yes])
if test "x$with_libgl" = "xyes" -o "x$with_libgl" = "xno"; then
	if test "$SYS" = "Win32"; then
		with_libgl="opengl32.dll"
	else
		with_libgl="libGL.so.1"
	fi
fi

AC_DEFINE_UNQUOTED(GL_LIBRARY, "$with_libgl",
	[Define to your default OpenGL library])


dnl Make the compiler extra-bitchy if desired

save_CFLAGS="$CFLAGS"
CFLAGS="-Wall -Winline"
if test "x$enable_bitchiness" = "xyes"; then
	CFLAGS="$CFLAGS -Wcast-qual -Wsign-compare -W -Wno-unused-parameter"
	dnl Other potential bitchiness:
	dnl -Wuninitialized -Wwrite-strings -Wbad-function-cast
	dnl -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations
	dnl -Wnested-externs -Wtraditional -Wconversion -Wcomment -Wcast-align
	dnl -Wshadow -Wredundant-decls -Wid-clash-31
fi
if test "x$enable_werror" = "xyes"; then
	CFLAGS="$CFLAGS -Werror"
fi
if test "x$enable_profile" = "xyes"; then
	CFLAGS="$CFLAGS -pg -g"
fi
CFLAGS="$CFLAGS $save_CFLAGS"

dnl We need to disable strict aliasing.
if test "x$GCC" = "xyes"; then
	CFLAGS="$CFLAGS -fno-strict-aliasing"
fi

AC_OUTPUT(
	Makefile
	twilight.spec
	include/Makefile
	src/Makefile
	src/base/Makefile
	src/image/Makefile
	src/renderer/Makefile
	src/sound/Makefile
	nq/Makefile
	qw/Makefile
	doc/Makefile
	doc/olddoc/Makefile
	tools/Makefile
)

AC_MSG_RESULT([
  Project Twilight v$VERSION configuration:
    Build system                : $SYS
    Compiler used               : $CC
    Compiler flags              : $CFLAGS
    SDL version                 : $SDLVER
    Default OpenGL library      : $with_libgl

  Path information
    Installation prefix         : $PDIR
    Binaries install to         : $BDIR
    Shared (read-only) data in  : $with_sharepath
    User (writable) data in     : $with_userpath
    Shared configuration        : $with_shareconf
    User's configuration        : $with_userconf

If something above doesn't look right, run ./configure --help to figure
out how to change it.  Otherwise, you are now ready to run make.
])

